# -*- coding:utf-8 -*- 
# Utils module: useful functions to build exploits
from ropgenerator.semantic.Engine import search
from ropgenerator.Constraints import Constraint, ConstraintType, Assertion
from ropgenerator.semantic.ROPChains import ROPChain
import itertools

def popMultiple(args, constraint=None, assertion=None):
    """
    args is a list of pairs (reg, value)
    reg is a reg UID
    value is an int
    Creates a chain that pops values into regs
    """
    if( constraint is None ):
        constr = Constraint()
    else:
        constr = constraint
    if( assertion is None ):
        a = Assertion()
    else:
        a = assertion
        
    perms = itertools.permutations(args)
    for perm in perms:
        res = ROPChain()
        for arg in perm:
            pop = search(QueryType.CSTtoREG, arg[0], arg[1], constr, a, n=1)
            if( not pop ):
                break
            else:
                res.addChain(pop[0])
                constr = constr.add(ConstraintType.REGS_NOT_MODIFIED, \
                        [arg[0]])
        if( pop ):
            return res
    return None
