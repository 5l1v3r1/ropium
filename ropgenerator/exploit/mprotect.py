## Functions to call mprotect with a ropchain
from ropgenerator.SearchEngine import search, pop_multiple
from ropgenerator.Gadget import GadgetType
import ropgenerator.Analysis as Analysis
from ropgenerator.Constraints import Constraint, ConstraintType
from itertools import permutations
from ropgenerator.Colors import info
            
def mprotect_X86(addr, size, prot=7, constraint=None):
    """
    Call mprotect from X86 arch
    Args must be on the stack:
    int mprotect(void *addr, size_t len, int prot)
    args must be in registers (ebx, ecx, edx)
    eax must be 0x7d = 125
    """
    
    if( constraint is None ):
        constraint = Constraint()
    
    # Set the registers
    args = [[Analysis.n2r('eax'),0x7d],[Analysis.n2r('ebx'), addr],[Analysis.n2r('ecx'),size], [Analysis.n2r('edx'),prot]]
    perms = permutations(args)
    for perm in perms:
        chain = pop_multiple(perm, constraint)
        if( chain ):
            break
    if( not chain ):
        info("Failed to set registers for the mprotect syscall")
        return []
    # Int 0x80
    int80_gadgets = search.int80(constraint)
    if( not int80_gadgets ):
        info("Failed to find an 'int 80' gadget")
        return []
    else:
        chain += int80_gadgets[0]
    info("Success")
    return chain
    
    
    
def mprotect_X64(addr, size, prot=7, constraint=None):
    """
    Call mprotect from X86-64 arch
    Args must be on registers (rdi, rsi, rdx):
    Sizes are (unsigned long, size_t, unsigned long)
    rax must be 10 
    """
    
    if( constraint is None ):
        constraint = Constraint()
    
    # Set the registers
    args = [[Analysis.n2r('rdi'),addr],[Analysis.n2r('rsi'), size],[Analysis.n2r('rdx'),prot], [Analysis.n2r('rax'),10]]
    perms = permutations(args)
    for perm in perms:
        chain = pop_multiple(perm, constraint)
        if( chain ):
            break
    if( not chain ):
        info("Failed to set registers for the mprotect syscall")
        return []
    # Syscall 
    syscalls = search.syscall(constraint)
    if( not syscalls ):
        info("Failed to find a syscall gadget")
        return []
    else:
        chain += syscalls[0]
    info("Success")
    return chain
        
