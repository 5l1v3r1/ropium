## Functions to call mprotect with a ropchain
from ropgenerator.SearchEngine import search
from ropgenerator.Gadget import GadgetType
import ropgenerator.Analysis as Analysis
from ropgenerator.Constraints import Constraint, ConstraintType
from itertools import permutations
from ropgenerator.Colors import info

def pop_multiple(args, constraint=None):
    """
    args is a list of pairs (reg, value)
    Creates a chain that pops values into regs
    """
    if( constraint is None ):
        constraint = Constraint()
    
    res = []
    for arg in args:
        pop = search.find(GadgetType.CSTtoREG, Analysis.regNamesTable[arg[0]], arg[1], constraint)
        if( not pop ):
            return []
        else:
            res += pop[0]
            constraint = constraint.add(ConstraintType.REGS_NOT_MODIFIED, \
                    [Analysis.regNamesTable[arg[0]]])
    return res
            
def mprotect_X86():
    """
    Call mprotect from X86 arch
    Args must be on the stack:
    int mprotect(void *addr, size_t len, int prot)
    """

    # We have to do an interuption INT 80
    # With eax = 0x7d (sys_mprotect)
    info("Not implemented yet")
    return []
    
    
    
def mprotect_X64(addr, size, prot=7, constraint=None):
    """
    Call mprotect from X86-64 arch
    Args must be on registers (rdi, rsi, rdx):
    Sizes are (unsigned long, size_t, unsigned long)
    rax must be 10 
    """
    
    if( constraint is None ):
        constraint = Constraint()
    
    # Set the registers
    args = [['rdi',addr],['rsi', size],['rdx',prot], ['rax',10]]
    perms = permutations(args)
    for perm in perms:
        chain = pop_multiple(perm, constraint)
        if( chain ):
            break
                
    if( not chain ):
        info("Failed to set registers for the mprotect syscall")
        return []
    
    # Syscall 
    syscalls = search.syscall(constraint)
    if( not syscalls ):
        info("Failed to find a syscall gadget")
    else:
        chain += syscalls[0]
    info("Success")
    return chain
        
