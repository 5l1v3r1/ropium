# -*- coding:utf-8 -*- 
# Utils module: useful functions to build exploits
import itertools
from ropgenerator.core.Architecture import *
from ropgenerator.main.Scanner import get_function_address, verify_bad_bytes
from ropgenerator.core.IO import *

# Set multiple registers to given values
def set_multiple_regs(args, SearchParametersBinding params):
    """
    Creates a chain that sets multiple values into regs
    
    args is a list of pairs (reg, val) 
        OR a list of triples (reg, val, Comment) 

    """
    saved_lmax = params.lmax
    saved_keep_regs = params.keep_regs
    
    # Try all possible permutations
    perms = itertools.permutations(args)
    for perm in perms:
        params.lmax = saved_lmax
        params.keep_regs = saved_keep_regs
        res = ROPChain()
        for arg in perm:
            tmp_res = None
            if( len(arg) == 3 ):
                comment = arg[2]
            else:
                comment = None
            if( isinstance(arg[1], int)):
                # Create search arguments
                dest = DestArg(DestType.REG, arg[0])
                assign = AssignArg(AssignType.CST, arg[1])
                tmp_res = search(dest, assign, params)
            elif( isinstance(arg[1], str)):
                error("Error, string arguments not supported yet")
                return None
            else:
                raise Exception("Unknown argument type in popMultiple: '{}'".format(type(arg)))
                
            if( not tmp_res.found ):
                # DEBUG TODO Check fail record
                break
            else:
                params.lmax -= tmp_res.chain.len()
                # If Reached max length, exit  
                if( params.lmax < 0 ):
                    res = None
                    break
                else:
                    res.add_chain(tmp_res.chain)
                    params.keep_regs.append(arg[0])
        if( res ):
            return res
    return None
    
    
## -------------------------------------------------------------
## Call functions
## ------------------------------------------------------------- 
def call_function(func_name, func_args, params):
    """
    func_args : list of values (int or string)
    """
    if( curr_arch_type() == ArchType.ARCH_X86 ):
        return "Not implemented yet for X86"
        # DEBUG TODO return call_function_x86(func_name, func_args, params )
    else if( curr_arch_type() == ArchType.ARCH_X64 ):
        return call_function_x64(func_name, func_args, params )
    return None

def call_function_x64(func_name, func_args, params):
    arg_regs = [RegX64.RDI, RegX64.RSI, RegX64.RDX, RegX64.RCX, RegX64.R8, RegX64.R9]
    
    # Check how many arguments 
    if( len(func_args) > 6 ):
        return "Doesn't support function call with more than 6 arguments for X64"
    
    # Get function address
    (name, addr) = get_function_address(func_name)
    if( addr is None ):
        return "Couldn't find function '{}' in the binary".format(func_name)
    
    # Check if bad bytes in function address 
    if( not verify_bad_bytes(addr, params.bad_bytes) ):
        return "'{}' address ({}) contains bad bytes".format(func_name, str_special('0x'+format(addr, '0'+str(curr_arch_octets()*2)+'x')))
    
    # Set arguments
    if( func_args ):
        params.lmax -= 1
        # Build the ropchain with the arguments
        args_chain = set_multiple_regs(map(lambda x,y:(x,y) , arg_regs[:len(func_args)], func_args), params)
        if( not args_chain):
            return "Couldn't load arguments in registers"
    else:
        # No arguments 
        args_chain = ROPChain()
    
    args_chain.add_padding(addr, 1, name)
    return args_chain
