# -*- coding:utf-8 -*- 
# Utils module: useful functions to build exploits
import itertools


def set_multiple_regs(args, SearchParametersBinding params):
    """
    Creates a chain that sets multiple values into regs
    
    args is a list of pairs (reg, val) 
        OR a list of triples (reg, val, Comment) 

    """
    saved_lmax = params.lmax
    saved_keep_regs = params.keep_regs
    
    # Try all possible permutations
    perms = itertools.permutations(args)
    for perm in perms:
        params.lmax = saved_lmax
        params.keep_regs = saved_keep_regs
        res = ROPChain()
        for arg in perm:
            tmp_res = None
            if( len(arg) == 3 ):
                comment = arg[2]
            else:
                comment = None
            if( isinstance(arg[1], int)):
                # Create search arguments
                dest = DestArg(DestType.REG, arg[0])
                assign = AssignArg(AssignType.CST, arg[1])
                tmp_res = search(dest, assign, params)
            elif( isinstance(arg[1], str)):
                error("Error, string arguments not supported yet")
                return None
            else:
                raise Exception("Unknown argument type in popMultiple: '{}'".format(type(arg)))
                
            if( not tmp_res.found ):
                # DEBUG TODO Check fail record
                break
            else:
                params.lmax -= tmp_res.chain.len()
                # If Reached max length, exit  
                if( params.lmax < 0 ):
                    res = None
                    break
                else:
                    res.add_chain(tmp_res.chain)
                    params.keep_regs.append(arg[0])
        if( res ):
            return res
    return None
