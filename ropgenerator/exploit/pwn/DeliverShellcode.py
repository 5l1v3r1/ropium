# -*- coding:utf-8 -*-  
# DeliverShellcode module: exploit type: copy shellcode into memory then execute it

from ropgenerator.IO import string_bold, string_special, banner, error
from ropgenerator.Constraints import Constraint, Assertion, BadBytes
from ropgenerator.exploit.Pwn import EXPLOIT_LMAX

################################
#  DELIVER-SHELLCODE COMMAND   # 
################################

CMD_DSHELL_HELP =  banner([string_bold("'deliver-shellcode' command"),\
                    string_special("(Deliver a shellcode & Execute it)")])
CMD_DSHELL_HELP += "\n\n\t"+string_bold("Description:")+\
"\n\t\tThis method tries to create an executable memory area"+\
"\n\t\t, then copy a given shellcode into this area, and then"+\
"\n\t\t jump to execute this shellcode"

OPTION_ADDRESS = '-a'
OPTION_ADDRESS_SHORT = "--address"


CMD_DSHELL_HELP += "\n\n\t"+string_bold("Options")+":"
CMD_DSHELL_HELP += "\n\n\t\t"+string_special(OPTION_ADDRESS_SHORT)+","+string_special(OPTION_ADDRESS)+" <int>\t Address where to deliver shellcode"

CMD_DSHELL_HELP += "\n\n\t"+string_bold("Examples")+": "+\
    "\n\t\tNo examples yet"
    
def print_help():
    print(CMD_DSHELL_HELP)
    

def dshell(args, badBytes=[], lmax=EXPLOIT_LMAX):
    if( not args ):
        print_help()
        return
    # Set default output format 
    OUTPUT = OUTPUT_CONSOLE
    
    seenAddress = False

    constraint = Constraint()
    assertion = Assertion()
    subcommand = None
    
    # Parse options    
    i = 0 
    while i < len(args):
        if( args[i][0] == '-' ):
            if( args[i] in [OPTION_ADDRESS, OPTION_ADDRESS_SHORT]):
                if( seenAddress ):
                    error("Error. '" + args[i] + "' option should be used only once")
                    return
                if( i+1 >= len(args)):
                    error("Error. Missing address after option '"+args[i]+"'")
                    return 
                seenAddress = True
                try:
                    address = int(args[i+1])
                except:
                    try:
                        address = int(args[i+1], 16)
                    except:
                        error("Error. '" + args[i+1] +"' bytes is not valid")
                        return
                i = i +1 
                seenLmax = True
            elif( args[i] in [OPTION_HELP, OPTION_HELP_SHORT]):
                        print_help()
                        return
